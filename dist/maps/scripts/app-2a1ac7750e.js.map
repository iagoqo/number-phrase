{"version":3,"sources":["scripts/app.js"],"names":["angular","module","NumberService","toPhrase","number","undefined","ones","onesToText","tens","tensToText","teens","teensToText","hundreds","hundredsToText","thousands","thousandsToText","and","dash","space","phrase","trim","Math","floor","onesList","twoDigits","isTeen","teensList","tensList","this","service","MainController","activate","transform","vm","$inject","controller","runBlock","$log","debug","run","config","$logProvider","debugEnabled"],"mappings":"CAAA,WACE,YAEAA,SACGC,OAAO,sBAIZ,WACE,YAOA,SAASC,KAWP,QAASC,GAASC,GAEhB,GAAa,EAATA,GAAcA,EAAS,KAAM,MAAOC,OAExC,IAAIC,GAAOC,EAAWH,GAClBI,EAAOC,EAAWL,GAClBM,EAAQC,EAAYP,GACpBQ,EAAWC,EAAeT,GAC1BU,EAAYC,EAAgBX,GAI5BY,GAAOF,GAAaF,KAAcJ,GAAQF,IAAS,QAGnDW,EAAOT,GAAQF,GAAQ,IAGvBY,EAAQJ,GAAaF,GAAY,IAGjCO,EAASL,EAAYI,EAAQN,EAAWI,GAAON,GAAUF,EAAOS,EAAOX,EAG3E,OAAOa,GAAOC,QAAU,OAS1B,QAASb,GAAWH,GAClB,GAAIE,GAAOe,KAAKC,MAAMlB,GAAU,GAC5BmB,GAAY,GAAI,MAAO,MAAO,QAAS,OAAQ,OAAQ,MAAO,QAAS,QAAS,OAEpF,OAAOA,GAASjB,GASlB,QAASK,GAAYP,GAEnB,GAAIoB,GAAYH,KAAKC,MAAMlB,GAAU,IAGjCqB,EAASD,EAAY,IAAkB,GAAZA,EAE3BlB,EAAOF,EAAS,GAChBsB,GAAa,GAAI,SAAU,SAAU,WAAY,WAAY,UAAW,UAAW,YAAa,WAAY,WAEhH,OAAOD,IAAUC,EAAUpB,GAS7B,QAASG,GAAWL,GAClB,GAAII,GAAOa,KAAKC,MAAMlB,EAAS,IAAM,GACjCuB,GAAY,GAAI,MAAO,SAAU,SAAU,QAAS,QAAS,QAAS,UAAW,SAAU,SAE/F,OAAOA,GAASnB,IAAS,GAS3B,QAASK,GAAeT,GACtB,GAAIQ,GAAWS,KAAKC,MAAMlB,EAAS,KAAO,EAE1C,OAAIQ,GAEKL,EAAWK,GAAY,WAEvB,GAUX,QAASG,GAAgBX,GACvB,GAAIU,GAAYO,KAAKC,MAAMlB,EAAS,KAAQ,EAE5C,OAAIU,GAEKP,EAAWO,GAAa,YAExB,GA/GXc,KAAKzB,SAAWA,EAPlBH,QACGC,OAAO,gBACP4B,QAAQ,gBAAiB3B,MA0H9B,WACE,YAOA,SAAS4B,GAAe5B,GAYtB,QAAS6B,KACPC,EAAUC,EAAG7B,QAGf,QAAS4B,GAAU5B,GACjB6B,EAAGd,OAASjB,EAAcC,SAASC,GAhBrC,GAAI6B,GAAKL,IAETK,GAAG7B,OAAS,EACZ6B,EAAGd,OAAS,GAEZc,EAAGD,UAAYA,EAEfD,IAbFD,EAAeI,SAAW,iBAA1BlC,QACGC,OAAO,gBACPkC,WAAW,iBAAkBL,MAyBlC,WACE,YAOA,SAASM,GAASC,GAEhBA,EAAKC,MAAM,gBANbF,EAASF,SAAW,QADpBlC,QACGC,OAAO,gBACPsC,IAAIH,MAUT,WACE,YAOA,SAASI,GAAOC,GAEdA,EAAaC,cAAa,GAL5BF,EAAON,SAAW,gBAFlBlC,QACGC,OAAO,gBACPuC,OAAOA","file":"scripts/app-2a1ac7750e.js","sourcesContent":["(function() {\n  'use strict';\n\n  angular\n    .module('numberPhrase', []);\n\n})();\n\n(function() {\r\n  'use strict';\r\n\r\n  angular\r\n    .module('numberPhrase')\r\n    .service('NumberService', NumberService);\r\n\r\n  /** @ngInject */\r\n  function NumberService() {\r\n\r\n    this.toPhrase = toPhrase;\r\n\r\n    /////\r\n\r\n    /**\r\n     * Returns the string representation of a number\r\n     * @param  {Number} number Number to convert\r\n     * @return {String}        Textual representation of the parameter\r\n     */\r\n    function toPhrase(number) {\n      //Return undefined if number is out of range\n      if (number < 0 || number > 9999) return undefined;\r\n\r\n      var ones = onesToText(number);\r\n      var tens = tensToText(number);\r\n      var teens = teensToText(number);\r\n      var hundreds = hundredsToText(number);\r\n      var thousands = thousandsToText(number);\r\n\r\n      // Will be ' and ' for numbers greater than 100 that have a digit greater than 0 in either\r\n      // of the two rightmost positions. False otherwise.\r\n      var and = (thousands || hundreds) && (tens || ones) && ' and ';\r\n\r\n      // Will be '-' for numbers that have digits on the tens and ones positions. False otherwise.\n      var dash = tens && ones && '-';\r\n\n      // Will be ' ' for numbers that have digits on the thousands and hundreds positions\n      var space = thousands && hundreds && ' ';\n\n      // Construct the phrase representation concatenating the pieces\r\n      var phrase = thousands + space + hundreds + and + (teens || (tens + dash + ones));\n\r\n      // Delete extra spaces or return 'zero' if the string ends up being empty\r\n      return phrase.trim() || 'zero';\r\n    }\r\n\r\n    /**\r\n     * Returns the string representation of the ones digit of a number.\r\n     * If the ones is 0 it returns an empty string.\r\n     * @param  {Number} number Number to evaluate\r\n     * @return {String}        String representation of the ones digit, empty if 0\r\n     */\r\n    function onesToText(number) {\r\n      var ones = Math.floor(number) % 10;\r\n      var onesList = ['', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine'];\r\n\r\n      return onesList[ones];\r\n    }\r\n\r\n    /**\r\n     * Returns the string representation of the lower two digits if they are between 10 and 20,\r\n     * which don't follow the same rule. Returns false if the number is not in that range.\r\n     * @param  {Number} number Number to evaluate\r\n     * @return {String}        String representation if the number is a teen, empty otherwise\r\n     */\r\n    function teensToText(number) {\r\n      // Get the last two digits\r\n      var twoDigits = Math.floor(number) % 100;\r\n\r\n      // The number is a teen if 10 < last-two-digits < 20\r\n      var isTeen = twoDigits > 10 && twoDigits < 20;\r\n\r\n      var ones = number % 10;\r\n      var teensList = ['', 'eleven', 'twelve', 'thirteen', 'fourteen', 'fifteen', 'sixteen', 'seventeen', 'eighteen', 'nineteen'];\r\n\r\n      return isTeen && teensList[ones];\r\n    }\r\n\r\n    /**\r\n     * Returns the string representation of the tens digit of a number.\r\n     * If it's 0, returns an empty string.\r\n     * @param  {Number} number Number to evaluate\r\n     * @return {String}        String representation of the tens digit, empty if 0\r\n     */\r\n    function tensToText(number) {\r\n      var tens = Math.floor(number / 10) % 10;\r\n      var tensList = ['', 'ten', 'twenty', 'thirty', 'forty', 'fifty', 'sixty', 'seventy', 'eighty', 'ninety'];\r\n\r\n      return tensList[tens] || '';\r\n    }\r\n\r\n    /**\r\n     * Returns the string representation of the hundreds digit of a number. If the number is lower\r\n     * than 100, returns an empty string.\r\n     * @param  {Number} number Number to evaluate\r\n     * @return {String}        String representation, empty if number < 100\r\n     */\r\n    function hundredsToText(number) {\r\n      var hundreds = Math.floor(number / 100) % 10;\r\n\r\n      if (hundreds) {\r\n        // The representation is the same as the ones + ' hundred'\r\n        return onesToText(hundreds) + ' hundred';\r\n      } else {\r\n        return '';\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Returns the string representation of the thousands digit of a number. If the number is lower\r\n     * than 1000, returns an empty string.\r\n     * @param  {Number} number Number to evaluate\r\n     * @return {String}        String representation, empty if number < 1000\r\n     */\r\n    function thousandsToText(number) {\r\n      var thousands = Math.floor(number / 1000) % 10;\r\n\r\n      if (thousands) {\r\n        // The representation is the same as the ones + ' thousand'\r\n        return onesToText(thousands) + ' thousand';\r\n      } else {\r\n        return '';\r\n      }\r\n    }\r\n  }\r\n})();\r\n\n(function() {\r\n  'use strict';\r\n\r\n  angular\r\n    .module('numberPhrase')\r\n    .controller('MainController', MainController);\r\n\r\n  /** @ngInject */\r\n  function MainController(NumberService) {\n    var vm = this;\r\n\r\n    vm.number = 0;\r\n    vm.phrase = '';\r\n\r\n    vm.transform = transform;\r\n\r\n    activate();\r\n\r\n    /////\r\n\r\n    function activate() {\r\n      transform(vm.number);\r\n    }\r\n\n    function transform(number) {\n      vm.phrase = NumberService.toPhrase(number);\n    }\n  }\r\n})();\r\n\n(function() {\n  'use strict';\n\n  angular\n    .module('numberPhrase')\n    .run(runBlock);\n\n  /** @ngInject */\n  function runBlock($log) {\n\n    $log.debug('runBlock end');\n  }\n\n})();\n\n(function() {\n  'use strict';\n\n  angular\n    .module('numberPhrase')\n    .config(config);\n\n  /** @ngInject */\n  function config($logProvider) {\n    // Enable log\n    $logProvider.debugEnabled(true);\n  }\n\n})();\n"],"sourceRoot":"/source/"}